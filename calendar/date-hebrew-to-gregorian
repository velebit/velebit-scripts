#!/home/bert/.local/lib/python/venv/default/bin/python

import argparse
import arrow
import convertdate
# import dateutil
import pyluach.dates
import re

# Note: the hebcal package's implementation just reuses pyluach, so skipping


USE_PL = True
USE_CD = True


MONTH_ADAR = 12
MONTH_ADAR_II = 13


def hebrew2gregorian(hebrew_ymd):
    hebrew_ymd = tuple(hebrew_ymd)
    gregorian_ymd = None
    if USE_PL:
        g0 = pyluach.dates.HebrewDate(*hebrew_ymd).to_greg()
        g_ymd0 = (g0.year, g0.month, g0.day)
        if gregorian_ymd is None:
            gregorian_ymd = g_ymd0
        else:
            assert gregorian_ymd == g_ymd0, \
                "{} != {}".format(gregorian_ymd, g_ymd0)
    if USE_CD:
        g_ymd2 = tuple(convertdate.hebrew.to_gregorian(*hebrew_ymd))
        if gregorian_ymd is None:
            gregorian_ymd = g_ymd2
        else:
            assert gregorian_ymd == g_ymd2, \
                "{} != {}".format(gregorian_ymd, g_ymd2)
    assert gregorian_ymd is not None
    gregorian_date = arrow.Arrow(*gregorian_ymd)
    return gregorian_date


def hebrew_year_is_leap(hebrew_year):
    is_leap = None
    if USE_PL:
        try:
            _ = pyluach.dates.HebrewDate(hebrew_year, MONTH_ADAR_II, 1)
            il0 = True
        except ValueError:
            il0 = False
        if is_leap is None:
            is_leap = il0
        else:
            assert is_leap == il0, "{} != {}".format(is_leap, il0)
    if USE_CD:
        # convertdate will return an incorrect result rather than throw an
        # exception for month 13 in a non-leap year
        rosh_hodesh_adar_ii = (hebrew_year, MONTH_ADAR_II, 1)
        actual_hebrew_date = convertdate.hebrew.from_gregorian(
            *convertdate.hebrew.to_gregorian(*rosh_hodesh_adar_ii))
        il2 = (actual_hebrew_date == rosh_hodesh_adar_ii)
        if is_leap is None:
            is_leap = il2
        else:
            assert is_leap == il2, "{} != {}".format(is_leap, il2)
    assert is_leap is not None
    return is_leap


def hebrew2text(hebrew_ymd):
    hebrew_ymd = tuple(hebrew_ymd)
    text = None
    if USE_PL:
        h0 = pyluach.dates.HebrewDate(*hebrew_ymd)
        t0 = (f"{h0:%-d %B %Y}"
              .replace(' Tishrei ', ' Tishri ')
              .replace(' Cheshvan ', ' Heshvan ')
              .replace(' Teves ', ' Teveth ')
              .replace(' Adar 1 ', ' Adar I ')
              .replace(' Adar 2 ', ' Adar II ')
              .replace(' Nissan ', ' Nisan ')
              .replace(' Iyar ', ' Iyyar ')
              )
        if text is None:
            text = t0
        else:
            assert text == t0, "{} != {}".format(text, t0)
    if USE_CD:
        t2 = convertdate.hebrew.format(*hebrew_ymd)
        if hebrew_ymd[1] >= MONTH_ADAR and hebrew_year_is_leap(hebrew_ymd[0]):
            t2 = (t2.replace(' Adar ', ' Adar I ')
                  .replace(' Adar I Bet ', ' Adar II '))
        if text is None:
            text = t2
        else:
            assert text == t2, "{} != {}".format(text, t2)
    assert text is not None
    return text


def print_info(hdate):
    hebrew_ymd = tuple((int(x) for x in re.split(r'(?:-|,\s*)', hdate)))
    date = hebrew2gregorian(hebrew_ymd)
    gregorian_text = date.format('dddd, MMMM D, YYYY')
    gregorian_ymd = date.format('YYYY-MM-DD')
    hebrew_text = hebrew2text(hebrew_ymd)
    print(f"{hebrew_text} {hebrew_ymd!r}"
          f" -> {gregorian_text} ({gregorian_ymd})")


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('date',  nargs='+',
                        help=("One or more Hebrew dates, formatted numerically"
                              " as 'YYYY-MM-DD' or 'YYYY, M, D'."))
    settings = parser.parse_args()
    return settings


if __name__ == '__main__':
    settings = parse_args()
    for d in settings.date:
        try:
            print_info(d)
        except Exception as e:
            print(e)
