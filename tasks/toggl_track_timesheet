#!/usr/bin/python3
# Generate a time sheet from the specified or default workspace
import argparse
import collections
import csv
from dataclasses import dataclass
import datetime as dt
import dateparser
import itertools
import pickle
import re
import sys
from typing import DefaultDict, Dict, List, Tuple, TypeVar
import tzlocal as tz
import bert_toggl_track as trk

CACHE_FILE = 'timesheet_data.pkl'

DAILY_SOFT_CAP = dt.timedelta(hours=8)
QUANTUM = dt.timedelta(minutes=60)
ENTRY_THRESHOLD = QUANTUM / 2


def parse_str_to_timedelta(td_str: str) -> dt.timedelta:
    fields = re.split(r':', td_str)
    assert len(fields) == 3, f'Unparsable time string: {td_str}'
    h, m, s = [int(f) for f in fields]
    return dt.timedelta(hours=h, minutes=m, seconds=s)


def format_timedelta(td: dt.timedelta) -> str:
    if td < dt.timedelta():
        sign, td = '-', -td
    else:
        sign = ''
    h_m, s = divmod(td.total_seconds(), 60)
    h, m = divmod(h_m, 60)
    return f"{sign}{h:02.0f}:{m:02.0f}:{s:02.0f}"


class Totals(object):
    "A collection of time category totals (as datetime.timedelta)"

    TotalsOrDerived = TypeVar('TotalsOrDerived', bound="Totals")
    TotalsOrDerived_2 = TypeVar('TotalsOrDerived_2', bound="Totals")

    def __init__(self, data_in: Dict[str, dt.timedelta]):
        try:
            data = dict(data_in)
            assert all([(i + dt.timedelta()) is not None
                        for i in data.values()]), \
                f"Bad addition for {data_in!r}"
            self.__data = data
        except TypeError:
            raise TypeError("Bad input data value(s) passed to"
                            f" {self.__class__.__name__} constructor:"
                            f" {data_in!r}")

    @classmethod
    def zero(cls: type[TotalsOrDerived]) -> TotalsOrDerived:
        return cls({})

    def __repr__(self) -> str:
        return f"{type(self).__name__}({self.__data!r})"

    def as_dict(self) -> Dict[str, dt.timedelta]:
        return dict(self.__data)

    @classmethod
    def from_csv(cls: type[TotalsOrDerived], filename) -> TotalsOrDerived:
        data = dict()
        with open(filename, 'r') as f:
            reader = csv.reader(f)
            next(reader)  # discard first line
            for row in reader:
                pr = row[0]
                if pr not in data:
                    data[pr] = dt.timedelta()
                data[pr] += parse_str_to_timedelta(row[-1])
        return cls(data)

    def total(self) -> dt.timedelta:
        return sum(self.__data.values(), start=dt.timedelta())

    def keys(self) -> Tuple[str, ...]:
        return tuple(self.__data.keys())

    def num_keys(self) -> int:
        return len(self.__data)

    def remap_key(self: TotalsOrDerived, func) -> TotalsOrDerived:
        data: DefaultDict[str, dt.timedelta] = \
            collections.defaultdict(dt.timedelta)
        for k, v in self.__data.items():
            data[func(k)] += v
        return self.__class__(data)

    def split(self: TotalsOrDerived, pred) \
            -> Tuple[TotalsOrDerived, TotalsOrDerived]:
        yes, no = {}, {}
        for k, v in self.__data.items():
            if pred(k, v):
                yes[k] = v
            else:
                no[k] = v
        cls = self.__class__
        return cls(yes), cls(no)

    def split_chain(self: TotalsOrDerived, *args) \
            -> Tuple[TotalsOrDerived, ...]:
        data = self
        results = []
        for pred in args:
            filtered, data = data.split(pred)
            results.append(filtered)
        results.append(data)
        return tuple(results)

    def filter(self: TotalsOrDerived, pred) -> TotalsOrDerived:
        return self.split(pred)[0]

    def get(self, key: str) -> dt.timedelta:
        return self.__data[key]

    def add(self: TotalsOrDerived, key: str, value: dt.timedelta) \
            -> TotalsOrDerived:
        "Add 'value' to 'key', returning new totals."
        data = collections.defaultdict(dt.timedelta, self.__data)
        data[key] += value
        return self.__class__(data)

    def remove(self: TotalsOrDerived, key: str, value: dt.timedelta) \
            -> TotalsOrDerived:
        """Remove 'value' from 'key' (if not enough, from all categories) and
           return new totals."""
        data = dict(self.__data)
        assert key in data, f"Key {key!r} is not in the data"
        assert data[key] >= dt.timedelta()
        if data[key] >= value:
            data[key] -= value
            return self.__class__(data)
        else:
            total0 = self.total()
            if total0 <= value:
                return self.zero()
            del data[key]
            partial = self.__class__(data)
            partial_total = partial.total()
            assert partial_total > dt.timedelta()
            return partial * ((total0 - value) / partial_total)

    def biggest_key(self) -> str:
        return max(self.__data.keys(), key=lambda k: self.__data[k])

    def __mul__(self: TotalsOrDerived, other: float) -> TotalsOrDerived:
        try:
            (other + 0.0) is not None
            cls = self.__class__
            return cls({k: (v * other) for k, v in self.__data.items()})
        except TypeError:
            pass
        raise TypeError(f"Don't know how to multiply {self!r} * {other!r}")

    def __rmul__(self: TotalsOrDerived, other: float) -> TotalsOrDerived:
        return self.__mul__(other)

    def __add__(self: TotalsOrDerived, other: TotalsOrDerived_2) \
            -> TotalsOrDerived:
        try:
            data: DefaultDict[str, dt.timedelta] = \
                collections.defaultdict(dt.timedelta, self.__data)
            for k, v in other.__data.items():
                data[k] += v
            return self.__class__(data)
        except TypeError:
            pass
        raise TypeError(f"Don't know how to add {self!r} + {other!r}")

    def __radd__(self: TotalsOrDerived, other: TotalsOrDerived_2) \
            -> TotalsOrDerived:
        return self.__add__(other)


class Quanta(object):
    "A collection of *discrete* time category totals (as int)"

    QuantaOrDerived = TypeVar('QuantaOrDerived', bound="Quanta")
    QuantaOrDerived_2 = TypeVar('QuantaOrDerived_2', bound="Quanta")

    def __init__(self, data_in: Dict[str, int], quantum: dt.timedelta):
        self.__data = dict(data_in)
        self.__quantum = quantum

    @classmethod
    def zero(cls: type[QuantaOrDerived], quantum: dt.timedelta) \
            -> QuantaOrDerived:
        return cls({}, quantum)

    def __repr__(self) -> str:
        return f"{type(self).__name__}({self.__data!r})"

    def as_dict(self) -> Dict[str, int]:
        return dict(self.__data)

    def as_time(self) -> Totals:
        return Totals({k: v * self.__quantum for k, v in self.__data.items()})

    @property
    def quantum(self) -> dt.timedelta:
        return self.__quantum

    def total(self) -> int:
        return sum(self.__data.values())

    def keys(self) -> Tuple[str, ...]:
        return tuple(self.__data.keys())

    def num_keys(self) -> int:
        return len(self.__data)

    def get(self, key: str) -> int:
        return self.__data[key]

    def add(self: QuantaOrDerived, key: str, value: int = 1) \
            -> QuantaOrDerived:
        "Add 'value' to 'key', returning new quanta."
        data = collections.defaultdict(int, self.__data)
        data[key] += value
        return self.__class__(data, self.__quantum)

    def remove(self: QuantaOrDerived, key: str, value: int = 1) \
            -> QuantaOrDerived:
        """Remove 'value' from 'key' and return new quanta."""
        data = dict(self.__data)
        assert key in data, f"Key {key!r} is not in the data"
        assert data[key] >= value
        if data[key] > value:
            data[key] -= value
        else:
            del data[key]
        return self.__class__(data, self.__quantum)

    def biggest_key(self) -> str:
        return max(self.__data.keys(), key=lambda k: self.__data[k])

    def __add__(self: QuantaOrDerived, other: QuantaOrDerived_2) \
            -> QuantaOrDerived:
        try:
            assert abs(self.quantum - other.quantum) < dt.timedelta(seconds=1)
            data: DefaultDict[str, int] = \
                collections.defaultdict(int, self.__data)
            for k, v in other.__data.items():
                data[k] += v
            return self.__class__(data, self.__quantum)
        except TypeError:
            pass
        raise TypeError(f"Don't know how to add {self!r} + {other!r}")

    def __radd__(self: QuantaOrDerived, other: QuantaOrDerived_2) \
            -> QuantaOrDerived:
        return self.__add__(other)


@dataclass
class Categories:
    "Several Totals for the same time period grouped by category"

    specific: Totals
    work_mix: Totals
    personal: Totals

    @classmethod
    def zero(cls) -> "Categories":
        return cls(Totals.zero(), Totals.zero(), Totals.zero())

    def __iter__(self):
        return iter((self.specific, self.work_mix, self.personal))

    def __mul__(self, other) -> "Categories":
        try:
            (other + 0.0) is not None
            return self.__class__(*[t * other for t in self])
        except TypeError:
            pass
        raise TypeError(f"Don't know how to multiply {self!r} * {other!r}")

    def __rmul__(self, other) -> "Categories":
        return self.__mul__(other)

    def __add__(self, other) -> "Categories":
        try:
            return self.__class__(
                *[sum(c, start=Totals.zero()) for c in zip(self, other)])
        except TypeError:
            pass
        raise TypeError(f"Don't know how to add {self!r} + {other!r}")

    def __radd__(self, other) -> "Categories":
        return self.__add__(other)


def get_week(settings: argparse.Namespace) -> Tuple[dt.datetime, dt.datetime]:
    "Return the (beginning, end) of the desired week based on the settings."

    if settings.week_of_day is not None:
        now_here = dateparser.parse(
            settings.week_of_day,
            settings={'DATE_ORDER': 'YMD', 'RETURN_AS_TIMEZONE_AWARE': True,
                      'REQUIRE_PARTS': ['year', 'month', 'day']})
        if now_here is None:
            raise ValueError(f"Bad date '{settings.week_of_day}'")
        settings.weeks_ago = 0
    else:
        now_here = dt.datetime.now(tz=tz.get_localzone())
    # datetime seems to treat adding X days as keeping the same h:m:s
    # even across DST changes, so most of the shenanigans below are
    # probably not needed. But we know they would work even with a
    # more painful time system.
    today_noon = now_here.replace(
        hour=12, minute=0, second=0, microsecond=0)
    monday_based_weekday = today_noon.weekday()
    monday_noon = today_noon - dt.timedelta(days=monday_based_weekday)
    if settings.weeks_ago is not None:
        weeks_ago = settings.weeks_ago
    else:  # automatic week selection
        if monday_based_weekday <= 1:  # Mon and Tue
            weeks_ago = 1
        else:  # Wed through Sun
            weeks_ago = 0
    week_start_noon = monday_noon - dt.timedelta(days=7*weeks_ago)
    week_start = week_start_noon.replace(
        hour=0, minute=0, second=0, microsecond=0)
    week_after_start_noon = week_start_noon + dt.timedelta(days=7)
    week_after_start = week_after_start_noon.replace(
        hour=0, minute=0, second=0, microsecond=0)
    week_end = week_after_start - dt.timedelta(seconds=1)
    return week_start, week_end


def true_delta(start: dt.datetime, end: dt.datetime) -> dt.timedelta:
    return dt.timedelta(seconds=(end.timestamp() - start.timestamp()))


def fetch_timesheet_data(workspace_key: str,
                         range_start: dt.datetime, range_end: dt.datetime) \
                         -> List[Totals]:
    tt = trk.create_client()
    daily: List[DefaultDict[str, dt.timedelta]] = \
        [collections.defaultdict(dt.timedelta) for i in range(7)]
    for entry in tt.time_entries(start=range_start, end=range_end):
        if workspace_key is not None and entry.workspace_id != workspace_key:
            continue
        project = entry.project
        label = project.name if project is not None else '?'
        one_sec = dt.timedelta(seconds=1)
        start = entry.start
        end = entry.end
        if end is None:
            # If the task is running, use the current time as the end time
            # (ignore any time sync difference between Toggl and this computer)
            end = dt.datetime.now(tz=start.tzinfo)
        end -= one_sec
        while start.weekday() != end.weekday():
            assert start < end
            split = end.replace(hour=0, minute=0, second=0, microsecond=0)
            assert start < split
            daily[split.weekday()][label] += true_delta(split, end + one_sec)
            end = split - one_sec
        assert start <= end
        daily[start.weekday()][label] += true_delta(start, end + one_sec)
    return [Totals(d) for d in daily]


def prepare_timesheet_data(workspace_key: str,
                           range_start: dt.datetime, range_end: dt.datetime,
                           settings: argparse.Namespace) \
        -> List[Totals]:
    span, daily = None, None
    read_from_cache, write_to_cache = settings.cache, settings.cache
    if read_from_cache:
        try:
            with open(CACHE_FILE, mode='rb') as f:
                span, daily = pickle.load(f)
                if (span[0] == range_start.isoformat() and
                        span[1] == range_end.isoformat()):
                    write_to_cache = False
                else:
                    daily = None
        except FileNotFoundError:
            pass
    if daily is None:
        daily = fetch_timesheet_data(workspace_key, range_start, range_end)
    if write_to_cache:
        with open(CACHE_FILE, mode='wb') as f:
            pickle.dump(((range_start.isoformat(), range_end.isoformat()),
                         daily), f)
    return daily


def categorize(totals: Totals) -> Categories:
    specific, work_mix, personal, other = totals.split_chain(
        lambda k, v: re.search(r'^RF:', k),
        lambda k, v: re.search(r'^work mix', k),
        lambda k, v: re.search(r'^(?:personal|family)', k))
    other_dict = other.as_dict()
    for k in other_dict.keys():
        if other_dict[k] != 0:
            print(f"Unknown project {k!r}, treating as work mix")
    return Categories(specific, work_mix + other, personal)


def uncategorize(cats: Categories) -> Totals:
    return sum(cats, start=Totals.zero())


def trim_daily_personal(cats: Categories,
                        soft_cap: dt.timedelta = DAILY_SOFT_CAP) \
                        -> Categories:
    total_personal = cats.personal.total()
    total_other = sum((c.total() for c in cats if c is not cats.personal),
                      start=dt.timedelta())
    if total_personal <= dt.timedelta():
        return Categories(*cats)
    target_personal = max(dt.timedelta(),
                          min(total_personal,
                              soft_cap - total_other))
    return Categories(cats.specific, cats.work_mix,
                      cats.personal * (target_personal / total_personal))


def apply_entry_threshold(cats: Categories,
                          threshold: dt.timedelta) \
                          -> Categories:
    big_enough, too_small = cats.specific.split(lambda k, v: v >= threshold)
    return Categories(big_enough, cats.work_mix + too_small, cats.personal)


def reassign_to_specific(cats: Categories) -> Totals:
    total_specific = cats.specific.total()
    total_other = sum((c.total() for c in cats if c is not cats.specific),
                      start=dt.timedelta())
    if total_specific <= dt.timedelta():
        assert total_other <= dt.timedelta()
        return Totals.zero()
    target_specific = total_specific + total_other
    return cats.specific * (target_specific / total_specific)


def quantize_week_slots(specific: Totals, quantum: dt.timedelta) \
        -> Quanta:
    total = specific.total()
    if total <= dt.timedelta():
        return Quanta.zero(quantum)
    if ((specific.num_keys() + 0.5) * quantum) > total:
        while ((specific.num_keys() + 0.5) * quantum) > total:
            quantum = quantum / 2
        # TODO verbosity
        print(f"(tt) quantum adjusted to {format_timedelta(quantum)}",
              file=sys.stderr)
    num_quanta = round(specific.total() / quantum)
    left = specific
    result = Quanta.zero(quantum)
    for k in specific.as_dict().keys():
        left = left.remove(k, quantum)
        result = result.add(k, 1)
    num_quanta -= specific.num_keys()
    assert num_quanta == round(left.total() / quantum)
    assert num_quanta >= 0
    for i in range(num_quanta):
        k = left.biggest_key()
        left = left.remove(k, quantum)
        result = result.add(k, 1)
    return result


def quantize_day_amounts(days: List[Totals], total_quanta: int,
                         quantum: dt.timedelta) \
        -> List[int]:
    src = [d.total() for d in days]
    dst = [0 for d in days]
    for q in range(total_quanta):
        pos = max(range(len(src)), key=lambda p: src[p])
        src[pos] -= quantum
        dst[pos] += 1
    return dst


def allocate_quanta(daily: List[Totals], weekly: Quanta,
                    day_amounts: List[int]) \
        -> List[Quanta]:
    assert weekly.total() == sum(day_amounts)
    assert len(daily) == len(day_amounts)
    result = [Quanta.zero(weekly.quantum) for i in day_amounts]
    daily_d = [collections.defaultdict(dt.timedelta, t.as_dict())
               for t in daily]
    day_amounts = list(day_amounts)

    def score(key: Tuple[int, str]) -> float:
        i, k = key
        if k in daily_d[i]:
            return 10000 + (daily_d[i][k].total_seconds() / weekly.get(k))
        else:
            return 0
    while sum(day_amounts) > 0:
        day_indices = [i for i in range(len(day_amounts))
                       if day_amounts[i] > 0]
        i, k = max(itertools.product(day_indices, weekly.keys()),
                   key=score)
        result[i] = result[i].add(k, 1)
        daily_d[i][k] -= weekly.quantum
        weekly = weekly.remove(k, 1)
        day_amounts[i] -= 1
    assert all([i == 0 for i in day_amounts])
    assert weekly.num_keys() == 0
    return result


def print_totals(totals: Totals):
    for k, v in totals.as_dict().items():
        print(f"{format_timedelta(v):>8} {k}")
    print(f"{format_timedelta(totals.total()):>8} +++++")


def print_quanta(quanta: Quanta):
    for k, v in quanta.as_dict().items():
        print(f"{v:>2} {k}")
    print(f"{quanta.total()} +++++")


def print_categories(cats: Categories):
    for cat in cats:
        print_totals(cat)
    totals = [cat.total() for cat in cats]
    sum_total = sum(totals, start=dt.timedelta())
    print(format_timedelta(sum_total) + " || " +
          " | ".join((format_timedelta(t) for t in totals)))
    print("===")


def process_timesheet(workspace_key: str, settings: argparse.Namespace):
    range_start, range_end = get_week(settings)
    daily: List[Totals] = prepare_timesheet_data(
        workspace_key, range_start, range_end, settings)
    # Categorize first, so we can also do daily trimming.
    daily_cat: List[Categories] = \
        [trim_daily_personal(categorize(d)) for d in daily]
    week_cat: Categories = \
        apply_entry_threshold(sum(daily_cat, start=Categories.zero()),
                              threshold=settings.threshold)
    week: Quanta = quantize_week_slots(reassign_to_specific(week_cat),
                                       settings.quantum)
    if False:
        print_quanta(week)
    day_amount: List[int] = \
        quantize_day_amounts(daily, week.total(), quantum=week.quantum)
    if False:
        print(day_amount)
    final_quanta = allocate_quanta(daily, week, day_amount)
    for i in range(len(final_quanta)):
        day = range_start + dt.timedelta(days=i)
        print(f"******** {day.strftime('%Y-%m-%d')} ********")
        print_totals(final_quanta[i].as_time())
        print("")


def parse_args():
    def as_mins(t: dt.timedelta):
        return round(t / dt.timedelta(minutes=1))
    parser = argparse.ArgumentParser(
        description="Generate time sheet from Toggl Track data")
    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help="increase verbosity; can be repeated")
    parser.add_argument('-c', '--cache', action='store_true',
                        help="enable caching to local file (for debugging)")
    parser.add_argument('-q', '--quantum', action='store',
                        type=lambda x: dt.timedelta(minutes=int(x)),
                        default=QUANTUM,
                        help=("minimum time interval for all activities"
                              " reported in the timesheet, in minutes"
                              f" [default: {as_mins(QUANTUM)}]"))
    parser.add_argument('-t', '--threshold', action='store',
                        type=lambda x: dt.timedelta(minutes=int(x)),
                        default=ENTRY_THRESHOLD,
                        help=("ignore any category with less than this many"
                              " minutes"
                              " reported in the timesheet, in minutes"
                              f" [default: {as_mins(ENTRY_THRESHOLD)}]"))
    weeks = parser.add_mutually_exclusive_group()
    weeks.add_argument('--this-week', action='store_const', const=0,
                       dest='weeks_ago',
                       help="generate data for this week (aka -w 0)")
    weeks.add_argument('--last-week', action='store_const', const=1,
                       dest='weeks_ago',
                       help="generate data for last week (aka -w 1)")
    weeks.add_argument('-w', '--weeks-ago', type=int,
                       help=("generate data for this many weeks ago"
                             " [default: use a weekday-based heuristic]"))
    weeks.add_argument('-d', '--week-of-day', '--day', type=str)
    parser.add_argument('workspace', nargs='?', type=int, default=None)
    settings = parser.parse_args()
    return settings


def main():
    settings = parse_args()
    process_timesheet(settings.workspace, settings)


if __name__ == "__main__":
    main()
