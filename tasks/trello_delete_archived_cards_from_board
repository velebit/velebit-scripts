#!/home/bert/.local/lib/python/venv/tasks/bin/python3
# Delete archived cards from the specified board.
import argparse
import sys
import trello.exceptions
from bert_trello import get_board, create_auth_token, read_auth_data


def process_cards(board_key, settings):
    try:
        board = get_board(board_key, board_key, verbosity=settings.verbose)
    except trello.exceptions.Unauthorized:
        board = get_board(board_key, board_key, verbosity=settings.verbose,
                          auth=create_auth_token(read_auth_data()))
    if settings.verbose >= 1:
        print("Checking cards.", file=sys.stderr)
    for card in board.closed_cards():
        if settings.filter_list is not None:
            tlist = card.get_list()
            if not (tlist.name == settings.filter_list or
                    tlist.id == settings.filter_list):
                print(f"(T) Keeping archived card '{card.name}' "
                      "because of list filter.", file=sys.stderr)
                continue  # skip this card
        name = card.name  # preserve before deletion
        card.delete()
        print(f"(T) Archived card '{name}' deleted.", file=sys.stderr)
    if settings.verbose >= 1:
        print("Checking lists.", file=sys.stderr)
    for tlist in board.closed_lists():
        if settings.filter_list is not None:
            if not (tlist.name == settings.filter_list or
                    tlist.id == settings.filter_list):
                for card in tlist.list_cards():
                    print(f"(T) Keeping card '{card.name}' from archived list "
                          "because of list filter.", file=sys.stderr)
                continue  # skip this list
        for card in tlist.list_cards():
            name = card.name  # preserve before deletion
            card.delete()
            print(f"(T) Card '{name}' from archived list deleted.",
                  file=sys.stderr)
    if settings.verbose >= 2:
        print("Done.", file=sys.stderr)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='count', default=0)
    parser.add_argument('-l', '--filter-list', metavar='LIST_NAME_OR_ID')
    parser.add_argument('board')
    settings = parser.parse_args()
    return settings


def main():
    settings = parse_args()
    process_cards(settings.board, settings)


if __name__ == "__main__":
    main()
