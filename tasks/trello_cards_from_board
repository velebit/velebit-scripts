#!/home/bert/.local/lib/python/venv/tasks/bin/python3
# List all cards (showing the list name, card name, and optionally
# description and IDs) for the specified board.
import argparse
import itertools
import trello.exceptions
from bert_trello import (get_board, create_auth_token, read_auth_data,
                         is_card_template)


def process_cards(board_key, settings):
    try:
        board = get_board(board_key, board_key, verbosity=settings.verbose)
    except trello.exceptions.Unauthorized:
        board = get_board(board_key, board_key, verbosity=settings.verbose,
                          auth=create_auth_token(read_auth_data()))
    cards_iter = None
    if settings.filter_list is None:
        if settings.print_archived:
            cards_iter = board.all_cards()
        else:
            cards_iter = board.open_cards()
    else:
        tlists = [tlist for tlist in board.list_lists()
                  if ((tlist.name == settings.filter_list or
                       tlist.id == settings.filter_list)
                      and (not tlist.closed or settings.print_archived))]
        assert len(tlists) > 0, \
            f"No lists matching '{settings.filter_list}' found"
        cards_iter = itertools.chain.from_iterable(
            [tlist.list_cards() for tlist in tlists])
    assert cards_iter is not None
    for card in cards_iter:
        tlist = card.get_list()
        closed = (card.closed or tlist.closed)
        if not closed or settings.print_archived:
            status, fields = '', []
            if settings.list:
                status += ('#' if tlist.closed else ' ')
                status += ('#' if card.closed else ' ')
                if settings.verbose > 0:
                    fields.append(tlist.id)
                fields.append(tlist.name)
            else:
                status += ('#' if closed else ' ')
            if settings.verbose > 0:
                fields.append(card.id)
            fields.append(card.name)
            if settings.description:
                fields.append(card.description)
            if settings.is_template:
                fields.append(is_card_template(card))
            print("{:3s} {}".format(status,
                                    ", ".join([repr(f) for f in fields])))


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='count', default=0)
    parser.add_argument('-d', '--description', action='store_true')
    parser.add_argument('-t', '--is-template', action='store_true')
    parser.add_argument('-a', '--print-archived', action='store_true')
    parser.add_argument('-l', '--filter-list', metavar='LIST_NAME_OR_ID')
    parser.add_argument('--list', action=argparse.BooleanOptionalAction,
                        default=None)
    parser.add_argument('board')
    settings = parser.parse_args()
    if settings.list is None:
        settings.list = (settings.filter_list is None)
    return settings


def main():
    settings = parse_args()
    process_cards(settings.board, settings)


if __name__ == "__main__":
    main()
