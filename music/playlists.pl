#!/usr/bin/perl
# Create Windows Media Player (wpl) and m3u playlists from a MP3/M4A/... tree.
use warnings;
use strict;
use File::Find;
use Encode qw();
#use Cwd;

# allow Unicode (utf8-encoded) console output
BEGIN {
  binmode(STDOUT, ":utf8");
  binmode(STDERR, ":utf8");
};

my $SCRIPT = $0;  $SCRIPT =~ s,.*[/\\],,;

# Which extension types are being written?
my ($default_wpl, $default_m3u, $default_m3u8, $default_qm3u) = (1, 1, 0, 1);
my $force_defaults = 0;
# Overwrite/remove existing playlists?
my $force_update = 1;
my $force_rm = 1;
# Generate playlists in directories with only one MP3 file or subdirectory?
my $even_single = 1;

my @audio_exts = qw( mp3 m4a );
my $audio_exts_re = '\.(?i:' . join('|', map "\Q$_", @audio_exts) . ')';

# These functions convert from OS's raw byte representation of e.g. file names
# to Perl's Unicode strings, and back.  This probably just involves fixing the
# UTF8 flag on the string.
sub from_os ( $ ) { Encode::decode('utf8', $_[0]); }
sub to_os ( $ )   { Encode::encode('utf8', $_[0]); }

sub uri_strict_encode_characters ( $ ) {
  my ($text) = @_;
  $text = Encode::encode('utf8', $text);
  $text =~ s@([^-._~A-Za-z0-9/])@sprintf "%%%02x", ord($1)@ge;
  $text;
}

sub uri_encode_characters ( $ ) {
  my ($text) = @_;
  $text = Encode::encode('utf8', $text);
  $text =~ s@([^-._~A-Za-z0-9/ ()'!])@sprintf "%%%02x", ord($1)@ge;
  $text;
}

sub write_m3u_variant ( $$$@ ) {
  my ($file, $cfg, $title, @list) = @_;
  open my $FILE, '>:utf8', $file or die "open(>$file): $!";
  $cfg->{utf8_bom}
    and print $FILE "\x{FEFF}";  # byte order mark, to indicate this is Unicode
  print $FILE "## $title -- generated by $SCRIPT\n";
  $cfg->{quote_uri_strict}
    and @list = map uri_strict_encode_characters($_), @list;
  $cfg->{quote_uri}
    and @list = map uri_encode_characters($_), @list;
  print $FILE "$_\n" for @list;
}

sub write_m3u_utf8 ( $$@ ) {
  # gmusicbrowser expects Unicode .m3u files with a BOM
  my ($file, $title, @list) = @_;
  write_m3u_variant $file, { utf8_bom => 1, quote_uri => 0 }, $title, @list;
}

sub write_m3u8 ( $$@ ) {
  my ($file, $title, @list) = @_;
  write_m3u_variant $file, { utf8_bom => 0, quote_uri => 0 }, $title, @list;
}

sub write_quoted_m3u ( $$@ ) {
  # VLC expects .m3u files to be URL-encoded
  my ($file, $title, @list) = @_;
  write_m3u_variant $file, { utf8_bom => 0, quote_uri => 1 }, $title, @list;
}

sub encode_wpl_characters ( $ ) {
  my ($text) = @_;
  $text =~ s,&,&amp;,g;
  $text =~ s,",&quot;,g;
  $text =~ s,<,&lt;,g;
  $text =~ s,>,&gt;,g;
  $text;
}

sub write_wpl ( $$@ ) {
  my ($file, $title, @list) = @_;
  my $count = scalar @list;
  $title = encode_wpl_characters $title;
  my $text = <<"EndOfHeader";
<?wpl version="1.0"?>
<smil>
  <head>
    <meta name="Generator" content="$SCRIPT"/>
    <meta name="ItemCount" content="$count"/>
    <title>$title</title>
  </head>
  <body><seq>
EndOfHeader
  for my $item (@list) {
    $item =~ s,/,\\,g;
    $item = encode_wpl_characters $item;
    $text .= qq[    <media src="$item"/>\n];
  }
  $text .= <<"EndOfFooter";
  </seq></body>
</smil>
EndOfFooter
  $text =~ s/\r?//g;  $text =~ s/\n/\r\n/g;
  open my $FILE, '>:utf8', $file or die "open(>$file): $!";
  print $FILE $text;
}

my (%files_deep, %files_here, %children, %files_exts);
sub process_files {
  my $base = from_os $File::Find::name;
  $base =~ s/($audio_exts_re)$// or return;
  my $ext  = $1;
  -f $_    or return;  # don't use to_os(), $_ is native octets already

  my @dir = split m:/:, $base;
  my @file = pop @dir;

  if (exists $files_exts{join '/', @dir, @file}) {
    # A file with the same name but a different extension was already found.
    $files_exts{join '/', @dir, @file}{$ext}++;
    return;
  }

  while (@dir) {
    my $dir  = join '/', @dir;
    my $file = join '/', @file;
    push @{$files_deep{$dir}}, $file;
    push @{$files_here{$dir}}, $file if @file == 1;
    $children{$dir}{$file[0]}++;
    $files_exts{join '/', @dir, @file}{$ext}++;
    $dir[-1] eq 'christmas' and last;
    $dir[-1] eq 'classical' and last;
    $dir[-1] eq 'kids'      and last;
    unshift @file, pop @dir;
  }
}
sub base_with_ext ( $$ ) {
  my ($dir, $base) = @_;
  exists $files_exts{"$dir/$base"}
    or die "full name not known for '$dir'/'$base'";
  my $ext_hash = $files_exts{"$dir/$base"};
  # find the first entry in @audio_exts that matches
  for my $e (@audio_exts) {
    exists $ext_hash->{".$e"} and return "$base.$e";
  }
  die "extensions not matched for '$dir'/'$base' (@{[keys %$ext_hash]})";
}

sub get_ext ( $$ ) {
  my ($file, $base) = @_;
  substr $file, length($base);  # whee, no checks!
}

find +{ preprocess => sub { sort @_; }, wanted => \&process_files }, '.';

# determine what to write based on what files are already present
my ($write_wpl, $write_m3u, $write_m3u8, $write_qm3u) = (0, 0, 0, 0);
for my $dir (sort keys %files_deep) {
  my $base = "$dir/00_playlist.";
  my $wpl  = "${base}wpl";
  my $m3u  = "${base}m3u";
  my $m3u8 = "${base}m3u8";
  my $qm3u = "${base}quoted.m3u";

  $write_wpl  = 1 if -e $wpl;
  $write_m3u  = 1 if -e $m3u;
  $write_m3u8 = 1 if -e $m3u8;
  $write_qm3u = 1 if -e $qm3u;
}
if (! ($write_wpl || $write_m3u || $write_m3u8 || $write_qm3u)
    or $force_defaults) {
  $write_wpl  = 1 if $default_wpl;
  $write_m3u  = 1 if $default_m3u;
  $write_m3u8 = 1 if $default_m3u8;
  $write_qm3u = 1 if $default_qm3u;
}

for my $dir (sort keys %files_deep) {
  my $base = "$dir/00_playlist.";
  my $wpl  = "${base}wpl";
  my $m3u  = "${base}m3u";
  my $m3u8 = "${base}m3u8";
  my $qm3u = "${base}quoted.m3u";

  # A playlist is expected only if
  # - $even_single is true and there are some MP3s or subdirs here, OR
  # - $even_single is false and there are at least 2 MP3s or subdirs here
  my $count = ( ($files_here{$dir} ? @{$files_here{$dir}} : 0) +
		($children{$dir} ? keys %{$children{$dir}} : 0) );
  my $limit = ($even_single ? 1 : 2);

  my ($need_wpl, $need_m3u, $need_m3u8, $need_qm3u) =
    ($write_wpl, $write_m3u, $write_m3u8, $write_qm3u);
  ($count < $limit)
    and ($need_wpl, $need_m3u, $need_m3u8, $need_qm3u) = (0, 0, 0, 0);

  my (@removed_exts, @written_exts);
  my ($skipped_rm, $skipped_write) = (0, 0);

  if (! $need_wpl && -e $wpl) {
    if ($force_rm) {
      push @removed_exts, get_ext($wpl, $base);
      unlink $wpl or warn "unlink($wpl): $!";
    } else {
      ++$skipped_rm;
    }
  }
    if (! $need_m3u && -e $m3u) {
    if ($force_rm) {
      push @removed_exts, get_ext($m3u, $base);
      unlink $m3u or warn "unlink($m3u): $!";
    } else {
      ++$skipped_rm;
    }
  }
  if (! $need_m3u8 && -e $m3u8) {
    if ($force_rm) {
      push @removed_exts, get_ext($m3u8, $base);
      unlink $m3u8 or warn "unlink($m3u8): $!";
    } else {
      ++$skipped_rm;
    }
  }
  if (! $need_qm3u && -e $qm3u) {
    if ($force_rm) {
      push @removed_exts, get_ext($qm3u, $base);
      unlink $qm3u or warn "unlink($qm3u): $!";
    } else {
      ++$skipped_rm;
    }
  }
  if (@removed_exts == 1) {
    print "rm    $base$removed_exts[0]\n";
  } elsif (@removed_exts) {
    print "rm    $base\{" . join(",", @removed_exts) . "}\n";
  }

  my $name = $dir;  $name =~ s,^.*/,,;
  my @files = map base_with_ext($dir, $_), @{$files_deep{$dir}};

  if ($need_wpl) {
    if (! -e $wpl || $force_update) {
      push @written_exts, get_ext($wpl, $base);
      write_wpl $wpl, $name, @files;
    } else {
      ++$skipped_write;
    }
  }
  if ($need_m3u) {
    if (! -e $m3u || $force_update) {
      push @written_exts, get_ext($m3u, $base);
      write_m3u_utf8 $m3u, $name, @files;
    } else {
      ++$skipped_write;
    }
  }
  if ($need_m3u8) {
    if (! -e $m3u8 || $force_update) {
      push @written_exts, get_ext($m3u8, $base);
      write_m3u8 $m3u8, $name, @files;
    } else {
      ++$skipped_write;
    }
  }
  if ($need_qm3u) {
    if (! -e $qm3u || $force_update) {
      push @written_exts, get_ext($qm3u, $base);
      write_quoted_m3u $qm3u, $name, @files;
    } else {
      ++$skipped_write;
    }
  }
  if (@written_exts == 1) {
    print "write $base$written_exts[0]\n";
  } elsif (@written_exts) {
    print "write $base\{" . join(",", @written_exts) . "}\n";
  }

  if (! @removed_exts and ! @written_exts) {
    if ($skipped_write) {
      print "KEEP  $dir\n";
    } elsif ($skipped_rm) {
      print "LEAVE $dir\n";
    } else {
      print "N/A   $dir\n";
    }
  }
}
